
/*
 * -------------------------------------------------
 *  uct-srst2 Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest
{
  homePage = 'https://github.com/kviljoen/uct-srst2'
  description = 'uct-srst2: A Nextflow pipeline for MLST and gene detection analyses using srst2'
  mainScript = 'main.nf'
}



// Some help with time stamps
import java.text.SimpleDateFormat

// Global default params, used in configs
params {
  name = false
  email = false
  version = 0.1 //pipeline version
  // Pipeline Options
  reads = "data/*{R1,R2}.fastq.gz"
  timestamp = new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())
  outdir = "./" + timestamp + "-uctsrst2"
  //srst2 Defaults
  mlst_delimiter = "-"
  mlst_max_mismatch = 10
  mlst_db = false
  mlst_definitions = false
  gene_db = false
  min_gene_cov = 90
  max_gene_divergence = 10
	
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  
  ilifu {
    includeConfig 'conf/base.config'
    includeConfig 'conf/ilifu.config'
  }
}
  
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
